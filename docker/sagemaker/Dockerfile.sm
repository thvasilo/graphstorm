# Docker file for building a docker image for running GraphStorm code on Amazon SageMaker
ARG DEVICE=gpu
ARG TORCH_VERSION=2.1.0
ARG SOURCE

FROM 763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:${TORCH_VERSION}-${DEVICE}-py310 as base

ENV DEBIAN_FRONTEND=noninteractive
ENV HOME=/root

ARG DGL_VERSION=1.1.3
ARG OGB_VERSION=1.3.6
ARG TRANSFORMERS_VERSION=4.28.1

LABEL maintainer="Amazon AI Graph ML team"

# Install related Python packages
RUN pip3 install \
        boto3 \
        numba==0.59.0 \
        numpy==1.26.4 \
        ogb==${OGB_VERSION} \
        pyarrow==15.0.0 \
        scikit-learn \
        scipy \
        transformers==${TRANSFORMERS_VERSION} \
    && rm -rf /root/.cache

# Install MPI etc needed by DistDGL
RUN apt update && \
    apt install -y --no-install-recommends \
        build-essential \
        libopenmpi-dev \
        software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test; \
    apt update && \
    apt upgrade libstdc++6 -y && \
    rm -rf /var/lib/apt/lists/*

# Copy workaround script for incorrect hostname
COPY build_artifacts/changehostname.c /opt/ml/code/
COPY build_artifacts/start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh

FROM base as branch-gpu
# Install DGL, and GSF deps that require torch
RUN pip3 install \
    dgl==${DGL_VERSION}+cu121 \
    -f https://data.dgl.ai/wheels/cu121/repo.html \
    && rm -rf /root/.cache


FROM base as branch-cpu
# Install DGL CPU version
RUN pip3 install \
    dgl==${DGL_VERSION} \
    -f https://data.dgl.ai/wheels-internal/repo.html && \
    rm -rf /root/.cache

FROM branch-${DEVICE} AS runtime


# /opt/ml and all subdirectories are utilized by SageMaker, we use the /code subdirectory to store our user code.
# TODO(xiangsx): change to pip install when PIP package is available
COPY code/graphstorm/ /opt/ml/code/graphstorm/
ENV PYTHONPATH="/opt/ml/code/graphstorm/python/:${PYTHONPATH}"

RUN cp /opt/ml/code/graphstorm/sagemaker/run/* /opt/ml/code/

# Download DGL source code
RUN cd /root; git clone --branch v${DGL_VERSION} https://github.com/dmlc/dgl.git
# Un-comment if we prefer a local DGL distribution
# COPY code/dgl /root/dgl
ENV PYTHONPATH="/root/dgl/tools/:${PYTHONPATH}"

WORKDIR /opt/ml/code

ENTRYPOINT ["bash", "-m", "start_with_right_hostname.sh"]
CMD ["/bin/bash"]
